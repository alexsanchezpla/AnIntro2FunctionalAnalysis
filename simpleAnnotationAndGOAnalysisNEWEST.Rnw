\documentclass{article}
\usepackage{underscore}
\usepackage[utf8]{inputenc}
\usepackage{longtable}
\usepackage[margin=1in]{geometry}
%\usepackage[spanish]{babel}
\usepackage{hyperref}
\usepackage{graphicx}


\begin{document}

\title{A quick gene selection, annotation and GO analysis}
\author{Alex S\'anchez$\sp {1,2}$}
\date{$\sp 1$Statistics and Bioinformatics Unit (VHIR)\\
 $\sp 2$ Statistics Department. University of Barcelona}

\maketitle

\tableofcontents

<<options, include=FALSE>>=
if(!require(knitr)) install.packages("knitr")
require(knitr)
opts_chunk$set(fig.path = 'images/grafic', tidy = FALSE, cache = FALSE)
options(width=80, warn=0, digits=4)
options(scipen=100)
options(java.parameters = "-Xmx4g" )
@

<<librerias, echo=FALSE, message=FALSE, warning=FALSE, results='hide'>>=
installifnot <- function(pckgName){
 if (!(require(pckgName, character.only = TRUE))) {
 install.packages(pckgName)
  }else{
    print(paste("Package", pckgName, "already installed", sep = " "))
  }
}
installBiocifnot <- function(pckgName){
 if (!(require(pckgName, character.only = TRUE))) {
    source("https://bioconductor.org/biocLite.R")
    biocLite(eval(pckgName), suppressUpdates = TRUE)
  }else{
    print(paste("Package", pckgName, "already installed", sep = " "))
  }
}

installBiocifnot("annotate")
installBiocifnot("GOstats")
installBiocifnot("org.Hs.eg.db")
installBiocifnot("hgu133a.db")
installBiocifnot("biomaRt")
@


\section{Introduction}

Most gene expression studies undergo one phase where, after gene
selection has been performed, one wishes to:
\begin{enumerate}
\item Annotate the genes or transcripts, that is associate, to each
  probeset or transcript, some identifiers in the appropriate
  databases that can be used to understand better the results or that
  are needed to proceed with further analyses (for instance GO
  Analysis needs ``Entrez'' identifiers).
\item Do some type of Gene Set Enrichment Analyses such as
  Overrepresentation Analysis (ORA) or classical Gene Set Enrichment
  Analysis (GSEA).
\end{enumerate}

This document is an illustration which does not intend to be exhaustive, on how to do this with some of these packages.

\subsection{Obtaining gene lists}

The first step in annotation analysis is to obtain the gene lists,
usually as the output of some differential expression analysis.

<<getGenes>>=
topTab <- read.table("https://raw.githubusercontent.com/alexsanchezpla/Ejemplo_de_MDA_con_Bioconductor/master/results/ExpressAndTop_AvsB.csv2", head=TRUE, sep=";", dec=",", row.names = 1)
colnames(topTab)
head(topTab)
@

\section{Annotating the genes}

This table has already been ``annotated'' in the script that has
performed the original analysis, but, \emph{what would we have had to do if
it hadn't been}?

We might have used either a specific annotation package for the array
or the BioMaRt package.

\subsection{Using a microarray annotation package}

If we hadn't had 'Entrez' Identifiers, but only the probeset identifiers which depend on the array type we might have done as follows:

<<annotateFromArrayPackage>>=
probeIDsAll <- rownames(topTab)
probeIDsUp <- probeIDsAll [topTab$adj.P.Val<0.05 & topTab$logFC > 0]
probeIDsDown <- probeIDsAll [topTab$adj.P.Val<0.05 & topTab$logFC < 0]

require(hgu133a.db)
keytypes(hgu133a.db)

geneEntrezsUp <- select(hgu133a.db, keys = probeIDsUp, columns=c("ENTREZID", "SYMBOL"))
geneEntrezsDown <- select(hgu133a.db, keys = probeIDsUp, columns=c("ENTREZID", "SYMBOL"))
geneEntrezsUniverse <- select(hgu133a.db, keys = probeIDsAll, columns=c("ENTREZID", "SYMBOL"))

head(geneEntrezsUp)
@

\subsection{Using BiomaRt}

Biomart is a powerful engine for linking identifiers.
It is a bit cryptic at the first approach because in order to use it we must define \emph{filters} (what we input for searching), \emph{attributes} (what we output) and \emph{values} (which values we input).

<<annotateWithBiomart>>=
biodataset <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
listDatasets(biodataset)$dataset

filters<-listFilters(biodataset)
# We need to find the filter to link with Affymetrx arrays hgu133a
u133aFilters<- grep("u133a", filters[,1] )
u133aFilters <- filters[u133aFilters,]
myu133aFilter <- u133aFilters[3,1]
myu133aFilter

atributs<- listAttributes(biodataset)
entrezAtributs<- grep("entrez", atributs[,1])
entrezAtribut <- atributs[entrezAtributs,]
myentrezAtribut <- entrezAtribut[2,1]
myentrezAtribut

# Now we can do the search
entrezfromProbesUp <- getBM(filters= myu133aFilter,
                          attributes= c(myentrezAtribut, myu133aFilter),
                          values= probeIDsUp,
                          mart= biodataset,uniqueRows=TRUE)
head(entrezfromProbesUp)
@

\subsection{The gene list for pathway Analysis}

In this example we had already had the Entrez and Symbol identifiers so we can extract these directly from the topTable.

Although we skip it here it may be interesting to compare the entrez identifiers obtained from the three distinct approaches. They should be identical, but there may be small discrepancies...

<<geneLists>>=
geneListUp <- topTab$EntrezsA [topTab$adj.P.Val<0.05 & topTab$logFC > 0]
head(geneListUp)
geneListDown <- topTab$EntrezsA [topTab$adj.P.Val<0.05 & topTab$logFC < 0]
length(geneListDown)
geneUniverse <- topTab$EntrezsA
length(geneUniverse)
writeGeneLists<- FALSE
if(writeGeneLists){
  write.csv(geneListUp, file="selectedAvsB.up.csv")
  write.csv(geneListDown, file="selectedAvsB.down.csv")
  write.csv(geneUniverse, file="geneUniverse.csv")
}
@

\section{Pathway Analysis}

We start by removing NA's (if any) and ensuring that we have unique identifiers.

<<prepareEntrezs>>=
# Remove potential NA's values
geneEntrezsUp <- unique(geneListUp[!is.na(geneListUp)])
geneEntrezsDown <- unique(geneListDown[!is.na(geneListDown)])
geneEntrezsUniverse <- unique(geneUniverse[!is.na(geneUniverse)])
@

We will use the \texttt{GOstats package} which proceeds in two steps:
\begin{enumerate}
  \item First we create the appropriate objects
  \item Next we use them to do the enrichment analysis
  \item In a final step we generate an html report with the test results
\end{enumerate}

First we create the appropriate objects
<<GOAnalysis1>>=
require(GOstats)
## Creamos los "hiperparametros" en que se basa el analisis
GOparams = new("GOHyperGParams",
               geneIds=geneEntrezsUp, universeGeneIds=geneEntrezsUniverse,
               annotation="org.Hs.eg.db", # might have use hgu133a.db instead
               ontology="BP",
               pvalueCutoff=0.001, conditional=FALSE,
               testDirection="over")
KEGGparams = new("KEGGHyperGParams",
                 geneIds=geneEntrezsUp, universeGeneIds=geneEntrezsUniverse,
                 annotation="org.Hs.eg.db", # might have use hgu133a.db instead
                 pvalueCutoff=0.01, testDirection="over")
@

Next we use them to do the enrichment analysis
<<GOAnalysis2>>=
GOhyper = hyperGTest(GOparams)
KEGGhyper = hyperGTest(KEGGparams)
cat("GO\n")
print(head(summary(GOhyper)))
cat("KEGG\n")
print(head(summary(KEGGhyper)))
@

In a final step we generate an html report with the test results

<<GOAnalysis3>>=
# Creamos un informe html con los resultados
GOfilename =file.path(paste("GOResults.AvsB.up",".html", sep=""))
KEGGfilename =file.path(paste("KEGGResults.AvsB.up",".html", sep=""))
htmlReport(GOhyper, file = GOfilename, summary.args=list("htmlLinks"=TRUE))
htmlReport(KEGGhyper, file = KEGGfilename, summary.args=list("htmlLinks"=TRUE))
@

\section{Analysis of Functional Profiles}

The \texttt{goProfiles} package provides a different approach to Pathway Analysis. Its most distinctive characteristic is the possibility of projecting gene lists on ``levels" of the Gene Ontology and compare these projections between lists (compare lists based on their projections).

<<goProfiles1>>=
require(goProfiles)
BPprofile1<- basicProfile(genelist=geneListUp, onto="BP", orgPackage="org.Hs.eg.db", empty.cats=FALSE, level=2)[[1]]
head(BPprofile1)
@

Now we might want to annotate the GO categories with their genes.
First we look the reverse, which GO terms are associated with each gene in the list

<<GOANots>>=
require(org.Hs.eg.db)
keytypes(org.Hs.eg.db)
entrezsUp2GO <- select(org.Hs.eg.db, keys = as.character(geneListUp), columns=c("SYMBOL", "GOALL"))
head(entrezsUp2GO)
entrezsUp2GOBP<- entrezsUp2GO[entrezsUp2GO$ONTOLOGY=="BP",]
BPprofileWithGenes<- cbind(BPprofile1, genes=rep("", nrow(BPprofile1)))
BPprofileWithGenes$genes<- as.character(BPprofileWithGenes$genes)
for (i in 1:nrow(BPprofile1)){
  GOIDi<- BPprofile1[i,"GOID"]
  genesi <-unique(entrezsUp2GOBP[entrezsUp2GOBP$GO==GOIDi,"ENTREZID"])
  genesi <- paste(genesi[!is.na(genesi)], collapse = " ")
  BPprofileWithGenes[i,"genes"]=genesi
}
head(BPprofileWithGenes)
@




\end{document}
